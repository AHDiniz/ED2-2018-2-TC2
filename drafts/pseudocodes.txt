How to solve each Bin Packing Heuristic:

(Only interested in the amouont of bins created)

1 - Worst Fit:

// Look for the queue with the biggest empty space that can fit the weight
// Only create new bin when weight doesn't fit in any existent bin
Worst_Fit(files[], limit)
{
    bins = new PQueue(); // Min Heap implementation
    for (i from 0 to files.length - 1)
    {
        if (bins.length == 0)
            bins.insert(files[i])
        min = bins.removeMin(); // Getting the smallest item in the queue
        if (min + files[i] > limit)
        {
            bins.insert(min);
            bins.insert(files[i]);
        }
        else
            bins.insert(min + files[i]);
    }
    return bins.length;
}

2 - Decreasing Worst Fit:

Decreasing_Worst_Fit(files[], limit)
{
    sort(files[]);
    return Worst_Fit(files, limit);
}

3 - Best Fit:

// Look for the bin with the smallest empty space that can fit the weight
// Only create new bin when weight doesn't fit in any existent bin
Best_Fit(files[], limit)
{
    bins = new BST(); // Binary Search Tree
    size = 0;
    for (i from 0 to files.length - 1)
    {
        if (!Find_Best_Node(bins.root, files[i], limit, bins))
        {
            bins.add(files[i]);
            size++;
        }
    }
    return size;
}

// Function that looks for the node with the smallest empty space that can fit the weight
Find_Best_Node(bin, data, limit, tree)
{
    if (bin == NULL) return false;
    if (bin.right != null)
        result = Find_Best_Node(bin.right, data, limit, tree);
    if (!result)
    {
        if (bin.key + data > limit)
            result = Find_Best_Node(bin.left, data, limit, tree);
        else
        {
            tree.remove(bin);
            bin.key += data;
            tree.insert(bin);
            result = true;
        }
    }
    return result;
}

4 - Decreasing Best Fit:

Decreasing_Best_Fit(files[], limit)
{
    sort(files[]);
    return Best_Fit(files, limit);
}
